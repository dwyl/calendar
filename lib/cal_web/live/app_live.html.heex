<div class="w-full p-4">
  <main role="main" class="flex w-full flex-col-reverse content-center justify-center md:flex-row">
    <!-- List of events -->
    <div class="flex flex-col md:w-1/2">
      <h2 class="text-5xl font-medium leading-tight text-slate-900">List of events</h2>
      <h2 class="text-md leading-tight text-slate-600">
        Click on a date and the list of events will be updated automatically.
      </h2>

      <%= for event <- @event_list do %>
        <div class="relative mt-4 block h-fit w-full overflow-hidden rounded-lg border border-gray-100">
          <div class="flex flex-row">
            <div class="flex w-14 flex-col items-center justify-center bg-red-700 py-2 pl-3 pr-3 text-white">
              <h3 class="text-xs">{render_date(event).month}</h3>
              <h3 class="text-2xl font-bold">{render_date(event).day}</h3>
              <h3 class="text-xs">{render_date(event).year}</h3>
            </div>

            <div class="ml-5 pb-2 pr-2 pt-2">
              <div class="sm:flex sm:justify-between sm:gap-4">
                <h3 class="text-lg font-bold text-gray-900 sm:text-xl">
                  <span class="mr-3">{Map.get(event, :summary)}</span>
                  <span class="rounded-full border border-indigo-500 px-3 py-1 text-xs text-indigo-500">
                    <span class="font-bold">{render_start_end_times(event)}</span>
                  </span>
                </h3>
              </div>

              <div class="mt-1">
                <p class="w-full text-sm text-gray-500">
                  <span>Organized by: </span>
                  <span class="font-bold">
                    {Map.get(event, :organizer) |> Map.get(:displayName) ||
                      Map.get(event, :organizer) |> Map.get(:email)}
                  </span>
                </p>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    <!-- Calendar and form section -->
    <div class="flex justify-center px-4 py-2 md:w-1/2">
      <div x-data="app()" x-init="[initDate(), getNoOfDays()]">
        <!-- Calendar -->
        <div class="container">
          <div class="overflow-hidden rounded-lg bg-white shadow">
            <div class="flex items-center justify-between px-6 py-2">
              <div>
                <span x-text="MONTH_NAMES[month]" class="text-lg font-bold text-gray-800"></span>
                <span x-text="year" class="ml-1 text-lg font-normal text-gray-600"></span>
              </div>
              <div class="rounded-lg border px-1" style="padding-top: 2px;">
                <button
                  type="button"
                  class="inline-flex cursor-pointer items-center rounded-lg p-1 leading-none transition duration-100 ease-in-out hover:bg-gray-200"
                  x-bind:class="{'cursor-not-allowed opacity-25': month == 0 }"
                  x-bind:disabled="month == 0 ? true : false"
                  @click="month--; getNoOfDays()"
                >
                  <svg
                    class="inline-flex h-6 w-6 leading-none text-gray-500"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M15 19l-7-7 7-7"
                    />
                  </svg>
                </button>
                <div class="inline-flex h-6 border-r"></div>
                <button
                  type="button"
                  class="inline-flex cursor-pointer items-center rounded-lg p-1 leading-none transition duration-100 ease-in-out hover:bg-gray-200"
                  x-bind:class="{'cursor-not-allowed opacity-25': month == 11 }"
                  x-bind:disabled="month == 11 ? true : false"
                  @click="month++; getNoOfDays()"
                >
                  <svg
                    class="inline-flex h-6 w-6 leading-none text-gray-500"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </button>
              </div>
            </div>

            <div class="-mx-1 -mb-1">
              <div class="flex flex-wrap">
                <template x-for="(day, index) in DAYS" x-bind:key="index">
                  <div style="width: 14.26%" class="px-2 py-2">
                    <div
                      x-text="day"
                      class="text-center text-sm font-bold uppercase tracking-wide text-gray-600"
                    >
                    </div>
                  </div>
                </template>
              </div>

              <div
                class="flex flex-wrap border-l border-t"
                phx-hook="DateClick"
                id="calendar-days"
              >
                <template x-for="blankday in blankdays">
                  <div
                    style="width: 14.28%; height: 60px"
                    class="border-b border-r px-4 pt-2 text-center"
                  >
                  </div>
                </template>
                <template x-for="(date, dateIndex) in no_of_days" x-bind:key="dateIndex">
                  <div
                    style="width: 14.28%; height:60px"
                    class="relative border-b border-r px-4 pt-2"
                  >
                    <div
                      @click="onClickCalendarDay(date);"
                      x-text="date"
                      class="inline-flex h-6 w-6 cursor-pointer items-center justify-center rounded-full text-center leading-none transition duration-100 ease-in-out"
                      x-bind:class="{'bg-blue-500 text-white': isToday(date) == true, 'text-gray-700 hover:bg-blue-200': isToday(date) == false }"
                    >
                    </div>
                    <div style="height: 80px;" class="mt-1 overflow-y-auto">
                      <template x-for="event in events.filter(e => new Date(e.event_date).toDateString() ===  new Date(year, month, date).toDateString() )">
                        <div
                          class="mt-1 overflow-hidden rounded-lg border px-2 py-1"
                          x-bind:class="{
                                                        'border-blue-200 text-blue-800 bg-blue-100': event.event_theme === 'blue',
                                                        'border-red-200 text-red-800 bg-red-100': event.event_theme === 'red',
                                                        'border-yellow-200 text-yellow-800 bg-yellow-100': event.event_theme === 'yellow',
                                                        'border-green-200 text-green-800 bg-green-100': event.event_theme === 'green',
                                                        'border-purple-200 text-purple-800 bg-purple-100': event.event_theme === 'purple'
                                                    }"
                        >
                          <p x-text="event.event_title" class="truncate text-sm leading-tight">
                          </p>
                        </div>
                      </template>
                    </div>
                  </div>
                </template>
              </div>
            </div>
          </div>
        </div>

        <div class="container mt-2">
          <div class="block  w-full overflow-hidden rounded-lg bg-white p-8 shadow">
            <h2 class="mb-6 border-b pb-2 text-2xl font-bold text-gray-800">Add Event Details</h2>

            <div class="mb-4">
              <label class="mb-1 block text-sm font-bold tracking-wide text-gray-800">
                Event title
              </label>
              <input
                class="w-full appearance-none rounded-lg border-2 border-gray-200 bg-gray-200 px-4 py-2 leading-tight text-gray-700 focus:border-blue-500 focus:bg-white focus:outline-none"
                type="text"
                x-model="event_title"
              />
            </div>

            <div class="mb-4 flex flex-row justify-between">
              <div>
                <label class="mb-1 block text-sm font-bold tracking-wide text-gray-800">
                  Start
                </label>
                <input
                  class="w-full appearance-none rounded-lg border-2 border-gray-200 bg-gray-200 px-4 py-2 leading-tight text-gray-700 focus:border-blue-500 focus:bg-white focus:outline-none"
                  type="text"
                  x-model="event_start"
                />
              </div>
              <div>
                <label class="mb-1 block text-sm font-bold tracking-wide text-gray-800">
                  End
                </label>
                <input
                  class="w-full appearance-none rounded-lg border-2 border-gray-200 bg-gray-200 px-4 py-2 leading-tight text-gray-700 focus:border-blue-500 focus:bg-white focus:outline-none"
                  type="text"
                  x-model="event_stop"
                />
              </div>
            </div>

            <div class="mb-4">
              <label class="label cursor-pointer">
                <input type="checkbox" class="checkbox" x-model="event_all_day" />
                <label class="mb-1 text-sm font-bold tracking-wide text-gray-800">All day</label>
              </label>
            </div>

            <div class="mb-4">
              <label class="mb-1 block text-sm font-bold tracking-wide text-gray-800">
                Event date
              </label>
              <input
                class="w-full appearance-none rounded-lg border-2 border-gray-200 bg-gray-200 px-4 py-2 leading-tight text-gray-700 focus:border-blue-500 focus:bg-white focus:outline-none"
                type="text"
                x-model="event_date"
                readonly
              />
            </div>

            <div class="mb-2">
              <span
                x-show="!!show_error"
                class="mb-1 block text-sm font-bold tracking-wide text-red-800"
              >
                Missing information or some of the fields are invalid.
              </span>
            </div>

            <div class="mt-8 text-right">
              <div class="mt-8 text-right">
                <div class="mt-8 text-right">
                  <button
                    type="button"
                    class="rounded-lg border border-gray-700 bg-gray-800 px-4 py-2 font-semibold text-white shadow-sm hover:bg-gray-700"
                    @click="addEvent()"
                  >
                    Save Event
                  </button>
                </div>
              </div>
            </div>
          </div>

          <script>
            const MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            function app() {
                return {
                    month: '',
                    year: '',
                    chosen_day: '',
                    no_of_days: [],
                    blankdays: [],
                    days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    show_error: false,

                    events: [],

                    event_title: '',
                    event_start: '',
                    event_stop: '',
                    event_all_day: false,
                    event_date: '',

                    initDate() {
                        let today = new Date();
                        this.chosen_day = today.getUTCDate();
                        this.month = today.getMonth();
                        this.year = today.getFullYear();
                        this.event_date = new Date(this.year, this.month, today.getDate()).toDateString();
                    },

                    isToday(day) {

                        const d = new Date();
                        const chosen_date = new Date(this.year, this.month, day);

                        return chosen_date.toDateString() === d.toDateString() ? true : false;
                    },

                    onClickCalendarDay(day) {
                        this.event_date = new Date(this.year, this.month, day).toDateString();
                        this.chosen_day = day;
                        window.dateClickHook.changeDate(this.year, this.month + 1, day);
                    },

                    clearModalFormData() {
                        this.event_title = ''
                        this.event_start = ''
                        this.event_stop = ''
                        this.event_all_day = false
                        this.show_error = false
                    },

                    addEvent() {
                        this.show_error = false
                        if (!this.validateForm()) {
                            this.show_error = true
                            return;
                        }

                        // get date - https://stackoverflow.com/questions/23593052/format-javascript-date-as-yyyy-mm-dd
                        let date = new Date(Date.parse(this.event_date))
                        const offset = date.getTimezoneOffset()
                        date = new Date(date.getTime() - (offset*60*1000))
                        date = date.toISOString().split('T')[0]

                        // push event
                        window.dateClickHook.createEvent(this.event_title, date, this.event_start, this.event_stop, this.event_all_day);

                        // clear the form data
                        this.clearModalFormData()
                    },

                    validateForm() {
                        // Check if title is empty
                        if (this.event_title.trim() == '') {
                            return false
                        }

                        // Check if start and stop are empty
                        if (this.event_start.trim() === '' && this.event_stop.trim() === '' && this.event_all_day === false) {
                            return false
                        }

                        // Check if start or stop are valid
                        const hour_minute_regex = /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/;
                        if((!hour_minute_regex.test(this.event_start) || !hour_minute_regex.test(this.event_stop)) && this.event_all_day === false) {
                            return false
                        }

                        // Check if start is before end
                        // https://stackoverflow.com/questions/6212305/how-can-i-compare-two-time-strings-in-the-format-hhmmss
                        if((this.event_start > this.event_stop) && this.event_all_day === false) {
                            return false
                        }

                        return true
                    },

                    getNoOfDays() {
                        let daysInMonth = new Date(this.year, this.month + 1, 0).getDate();

                        // find where to start calendar day of week
                        let dayOfWeek = new Date(this.year, this.month).getDay();
                        let blankdaysArray = [];
                        for ( var i=1; i <= dayOfWeek; i++) {
                            blankdaysArray.push(i);
                        }

                        let daysArray = [];
                        for ( var i=1; i <= daysInMonth; i++) {
                            daysArray.push(i);
                        }

                        this.blankdays = blankdaysArray;
                        this.no_of_days = daysArray;
                    }
                }
            }
          </script>
        </div>
      </div>
    </div>
  </main>
</div>
